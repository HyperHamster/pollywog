#!/usr/bin/env bash
# shellcheck disable=SC2153,SC2154,SC2188
# vim: ts=4:sw=4:sts=4:et


#                     888 888
#                     888 888
#                     888 888
#   88888b.   .d88b.  888 888 888  888 888  888  888  .d88b.   .d88b.
#   888 "88b d88""88b 888 888 888  888 888  888  888 d88""88b d88P"88b
#   888  888 888  888 888 888 888  888 888  888  888 888  888 888  888
#   888 d88P Y88..88P 888 888 Y88b 888 Y88b 888 d88P Y88..88P Y88b 888
#   88888P"   "Y88P"  888 888  "Y88888  "Y8888888P"   "Y88P"   "Y88888
#   888                            888                             888
#   888                       Y8b d88P                        Y8b d88P
#   888                        "Y88P"                          "Y88P"
#
#   pollywog - CLI WINE version manager
#
#   Pollywog is a Bash script intended to replace the Wine version management
#   functionality of PlayOnLinux via a command-line interface.
#
#   Author: HyperHamster
#   License: MIT


#   MIT License
#
#   Copyright (c) 2017 HyperHamster
#
#   Permission is hereby granted, free of charge, to any person obtaining a copy
#   of this software and associated documentation files (the "Software"), to deal
#   in the Software without restriction, including without limitation the rights
#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#   copies of the Software, and to permit persons to whom the Software is
#   furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included in all
#   copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#   SOFTWARE.


# TODO: add prefix program shortcut creation/management
# TODO: add/implement wine architecture to/from prefix metadata file
# IDEA: add gallium-nine support
# IDEA: add generic wine patch select system


help_msg="\
usage:
    pollywog <operation>
operations:
    -h, --help          print this message
    -R [option(s)] <program> [argument(s)]
                        run program under wine versioned environment
    -W [option(s)] [wine_version(s)]
                        manage wine versions
    -P [option(s)] [wine_prefix(s)]
                        manage wine prefixes
    -S [option(s)] <wine_prefix> <shortcut>
                        run shortcut from wine prefix"

error() {
    local type
    if [[ $1 == '-t' ]]; then
        type="$2"
        shift 2
    fi
    
    local message
    [[ $ERROR_MSG ]] && message="$ERROR_MSG" || message="$*"
    
    echo "pollywog: ${type:-error}: $message" 1>&2
    [[ $type ]] || exit 1
}
warn() {
    error -t warn "$*"
}

arch_regex='^(x86_64|i[3-7]86)$'
arch=$(uname -m)
[[ $arch =~ $arch_regex ]] || error 'machine architecture not supported by wine (neither 64-bit nor 32-bit)'

abs_dir_regex='^(/|(/[^/\0]+)+)$'
[[ $POLLYWOG_DIR =~ $abs_dir_regex ]] && pollywog_dir="$POLLYWOG_DIR" || pollywog_dir="$HOME/.pollywog"

oparg="$(echo "$1" | tr -d \- | cut -b1)"
setopt() {
    if [[ $1 == '-t' ]]; then
        shift
        local op=0
    fi
    [[ $op ]] && local word='operation' || local word='option'
    if [[ $1 == '?' ]]; then
        [[ $op ]] && OPTARG="$oparg"
        error "invalid $word '-$OPTARG' (use -h for help)"
    elif [[ $1 == ':' ]]; then
        error "no argument specified for $word '-$OPTARG'"
    else
        [[ $op ]] && local base='op_' || local base='opt_'
        declare -g "$base$1=0"
    fi
}

opts=()
while getopts ':hRWPS' opt; do
    opts+=("$opt")
done
OPTIND=1
if [[ ${#opts[@]} -ge 1 && ${opts[0]} != h ]]; then
    setopt -t "${opts[0]}"
else
    echo "$help_msg"
    exit
fi

help_msg_op_R="\
usage:
    pollywog -R [option(s)] <program> [argument(s)]
                        run program under wine versioned environment
options:
    -h, --help          print this message
    -s                  use wine-staging patched wine version
    -v <wine_version>   specify wine version to use
    -p <wine_prefix>    specify wine prefix to use
    -c                  run winecfg
    -t                  run winetricks"

help_msg_op_W="\
usages:
    pollywog -W [option(s)] [wine_version(s)]
                        install wine versions
    pollywog -W
                        list wine versions
options:
    -h, --help          print this message
    -s                  install with wine-staging patches applied
    -b, --32            perform 32-bit only build instead of wow64 build on 64-bit machines (saves time)
    -r                  remove wine version(s)"

help_msg_op_P="\
usages:
    pollywog -P [option(s)] [wine_prefix(s)]
                        query wine prefixes
    pollywog -P
                        list wine prefixes
options:
    -h, --help          print this message
    -s                  use wine-staging patched wine version
    -c                  create wine prefix(es)
    -v <wine_version>   set wine version of wine prefix(es)
    -u                  unset wine version of wine prefix(es)
    -n                  rename wine prefix
    -r                  remove wine prefix(es)
    -d                  change directory to wine prefix"

help_msg_op_S="\
usage:
    pollywog -S [option(s)] <wine_prefix> [shortcut]
                        run shortcut from wine prefix (if shortcut is omitted assumes '_')
    pollywog -S
                        list shortcuts
    pollywog -S [options(s)] <wine_prefix> <shortcut> <program>
                        create shortcut for program in wine prefix
options:
    -h, --help          print this message
    -n                  rename shortcut in wine prefix
    -r                  remove shortcut(s) from wine prefix"
#    -c <program>        create shortcut for program in wine prefix

wine_version_regex='^[0-9]+\.[0-9]+(\.[0-9]+$|-rc[0-9]+$|$)'

wine_version_valid() {
    [[ "$*" =~ $wine_version_regex ]] && return 0
    warn 'invalid wine version format'
    return 1
}

wineprefix_dir="$pollywog_dir/wineprefix"

list_wine_prefixes() {
    [[ $(shopt | grep nullglob | cut -f2) == off ]] && { shopt -s nullglob; nullglob_set=0; }
    [[ ! -d $wineprefix_dir ]] && return
    local prefixes=("$wineprefix_dir"/*)
    local version
    local dotfile
    for prefix in "${prefixes[@]}"; do
        #[[ "$*" == \-n ]] && { echo "${prefix##*/}"; continue; }
        dotfile="$prefix/.pollywog"
        parse_dotfile -A "$dotfile"
        if [[ ${dotfile_variables[wine_version]} ]]; then
            version="${dotfile_variables[wine_version]}"
        else
            if [[ ! $system_version ]]; then
                system_version="$(wine --version)"
                [[ $system_version == *\(*\)* ]] && system_patch="$(echo "${system_version,,}" | tr -d \(\) | cut -f2 -d\ )/"
                system_version="$(echo "${system_version//wine-/}" | cut -f1 -d\ )"
            fi
            version="$system_patch$system_version"
        fi
        version="${dotfile_variables[wine_patch]}${dotfile_variables[wine_patch]:+/}$version${dotfile_variables[wine_arch]:+/}${dotfile_variables[wine_arch]}"
        prefix="${prefix##*/}"
        #[[ $prefix == *\ * ]] && { [[ "$*" == \-c ]] && prefix="${prefix//\ /\/}" || prefix="'$prefix'"; }
        echo "$prefix $version"
    done
    [[ $nullglob_set ]] && shopt -u nullglob
}

wine_prefix_exists() {
    if [[ $1 == \-p ]]; then
        shift
        if wine_prefix_exists -n "$*"; then
            echo -n ":: Wine prefix '$*' does not exist, create it now? [Y/n] "
            read -rN 1
            [[ $REPLY != *$'\n'* ]] && echo
            if [[ ${REPLY,,} != n ]]; then
                echo ":: Creating Wine prefix '$*'..."
                mkdir -p "$wineprefix_dir/$*"
                return 0
            fi
        fi
    elif [[ $1 == \-n ]]; then
        shift
        [[ ! -d $wineprefix_dir/"$*" ]] && return 0
        warn "wine prefix '$*' already exists"
    else
        [[ -d $wineprefix_dir/"$*" ]] && return 0
        warn "wine prefix '$*' does not exist"
    fi
    return 1
}

list_wine_versions() {
    [[ $(shopt | grep nullglob | cut -f2) == off ]] && { shopt -s nullglob; nullglob_set=0; }
    local regex='^(source|build_32|build_64|staging)$'
    if [[ -d "$pollywog_dir/wine" ]]; then
        local versions=("$pollywog_dir"/wine/*)
        for version in "${versions[@]}"; do
            version="${version##*/}"
            [[ ! $version =~ $regex ]] && echo "$version" 
        done
    fi
    if [[ -d "$pollywog_dir/wine/staging" ]]; then
        local versions=("$pollywog_dir"/wine/staging/*)
        for version in "${versions[@]}"; do
            version="${version##*/}"
            [[ ! $version =~ $regex ]] && echo "staging/$version" 
        done
    fi
    [[ $nullglob_set ]] && shopt -u nullglob
}

wine_version_installed() {
    local prompt=
    if [[ $1 == \-p ]]; then
        shift
        local prompt=0
    fi
    wine_version_valid "$*" || exit 1
    local value=1;
    [[ -d $wine_dir/"$*" ]] && value=0
    if [[ $prompt && $value -eq 1 ]]; then
        echo -n ":: Wine version '$*' is not installed, install it now? [Y/n] "
        read -rN 1
        [[ $REPLY != *$'\n'* ]] && echo
        if [[ "${REPLY,,}" != n ]]; then
            install_wine_versions "$*"
            value=0
        fi
    fi
    return $value
}

name_regex='[A-Za-z_][A-Za-z0-9_]*'
variable_regex="^$name_regex=.*$"
shortcut_regex="^\[$name_regex\]$"

parse_dotfile() {
    local array
    if [[ $1 == -A ]]; then
        shift
        unset dotfile_variables
        unset dotfile_shortcuts
        array=0
    else
        unset shortcuts
    fi
    
    local dotfile_path="$1"
    [[ ! -e $dotfile_path ]] && > "$dotfile_path"
    
    local shortcut
    while read -r; do
        if [[ $shortcut ]]; then
            [[ $array ]] && declare -gA dotfile_shortcuts["$shortcut"]="$REPLY" || declare -gA shortcuts["$shortcut"]="$REPLY"
            shortcut=
        else
            if [[ $REPLY =~ $variable_regex ]]; then
                [[ $array ]] && declare -gA dotfile_variables["${REPLY%%=*}"]="${REPLY#*=}" || declare -g "$REPLY"
            elif [[ $REPLY =~ $shortcut_regex ]]; then
                shortcut="${REPLY//[\[\]]}"
            fi
        fi
    done < "$dotfile_path"
}

update_dotfile() {
    #local ignore
    #if [[ $1 == -i ]]; then
    #    shift
    #    ignore="$1"
    #    shift
    #fi
    
    local dotfile_path="$1" #"$HOME/.pollywog/wineprefix/newformat/.pollywog"
    shift
    
    local ignored_variables=()
    local ignored_shortcuts=()
    for ignore; do
        if [[ $ignore =~ \^$name_regex\$ ]]; then
            ignored_variables+=("$ignore")
        elif [[ $ignore =~ $shortcut_regex ]]; then
            ignored_shortcuts+=("${ignore//[\[\]]}")
        fi
    done
    
    parse_dotfile -A "$dotfile_path"
    > "$dotfile_path"
    
    #local variables
    #[[ $* ]] && variables=("$@") ||
    [[ -v variables ]] || local variables=('wine_version' 'wine_patch' 'wine_arch')
    for variable in "${variables[@]}"; do
        for ignored in "${ignored_variables[@]}"; do
            [[ $variable == "$ignored" ]] && continue 2
        done
        [[ -v $variable ]] && echo "$variable=${!variable}" >> "$dotfile_path"
    done
    for variable in "${!dotfile_variables[@]}"; do
        for ignored in "${ignored_variables[@]}"; do
            [[ $variable == "$ignored" ]] && continue 2
        done
        for written in "${variables[@]}"; do
            [[ -v $written && $variable == "$written" ]] && continue 2
        done
        echo "$variable=${dotfile_variables[$variable]}" >> "$dotfile_path"
    done
    
    for shortcut in "${!shortcuts[@]}"; do
        # /!\ without this bash complains of arithmetic error; what in the literal fuck /!\
        echo -n ''
        # /!\
        if [[ ${dotfile_shortcuts[$shortcut]} ]]; then
            warn "shortcut '$shortcut' already exists"
            continue
        fi
        if [[ ! $shortcut =~ ^$name_regex$ ]]; then
            warn 'shortcut name may only contain letters, numbers, underscores, and may only begin with a letter or an underscore'
            continue
        fi
        echo "[$shortcut]" >> "$dotfile_path"
        echo "${shortcuts[$shortcut]}" >> "$dotfile_path"
    done
    for shortcut in "${!dotfile_shortcuts[@]}"; do
        for ignored in "${ignored_shortcuts[@]}"; do
            [[ $shortcut == "$ignored" ]] && continue 2
        done
        echo "[$shortcut]" >> "$dotfile_path"
        echo "${dotfile_shortcuts[$shortcut]}" >> "$dotfile_path"
    done
}

#generate_version_file() {
#    wine_version_installed -p "$1" || exit 1
#    local contents="$1"
#    [[ $opt_s ]] && contents="staging/$contents"
    #version_file="$contents"
#    declare -g $2="$contents"
#}

install_wine_versions() {
    set_wine_dir
    local source_base_dir="$wine_dir/source"
    mkdir -p "$source_base_dir"
    
    for wine_version in "$@"; do
        wine_version_valid "$wine_version" || continue
        if wine_version_installed "$wine_version"; then
            echo -n ":: Wine version '$*' is already installed, reinstall it? [y/N] "
            read -rN 1
            [[ $REPLY != *$'\n'* ]] && echo
            [[ ${REPLY,,} != y ]] && continue
            rm -rf "${wine_dir:?unset/empty}/$wine_version" "$wine_dir/build_32/$wine_version" "$wine_dir/build_64/$wine_version"
        fi
        if [[ $opt_s ]]; then
            source_dir="$source_base_dir/wine-patched-staging-$wine_version"
        else
            source_dir="$source_base_dir/wine-$wine_version"
        fi
        if [[ -d $source_dir ]]; then
            echo -n ":: Wine version '$*' is already downloaded, redownload it? [y/N] "
            read -rN 1
            [[ $REPLY != *$'\n'* ]] && echo
            [[ ${REPLY,,} != y ]] && local skip_dl=0 || rm -rf "$source_dir"
        fi
        
        
        if [[ ! $skip_dl ]]; then
            echo ":: Downloading Wine version '$wine_version'..."
            if [[ $opt_s ]]; then
                source_url="https://github.com/wine-compholio/wine-patched/archive/staging-$wine_version"
            else
                parent_url=$(echo "$wine_version" | cut -d. -f-2)
                [[ $(echo $parent_url | cut -d. -f1) -eq 2 && $(echo $parent_url | cut -d. -f2) -ne 0 ]] && parent_url='2.x'
                source_url="https://dl.winehq.org/wine/source/$parent_url/wine-$wine_version"
            fi
            test_url() {
                local response_code
                response_code="$(curl -sLI "$1" | grep '^HTTP/1\.[0-1]' | cut -d\  -f2 | tail -1)"
                echo "$response_code"
            }
            tar_types=(.tar.bz2 .tar.xz .tar.gz)
            for tar_type in "${tar_types[@]}"; do
                if [[ $(test_url "$source_url$tar_type") -eq 200 ]]; then
                    mkdir -p "$source_base_dir"
                    case $tar_type in
                        ${tar_types[0]})
                            tar_opt='j';;
                        ${tar_types[1]})
                            tar_opt='J';;
                        ${tar_types[2]})
                            tar_opt='z';;
                    esac
                    #curl -sL "$source_url$tar_type" | tar "$tar_opts" "$source_base_dir" &>/dev/null && break
                    
                    source_tarball="$source_base_dir/${wine_patch:-wine}-$wine_version$tar_type"
                    [[ -e $source_tarball ]] && rm -f "$source_tarball"
                    wget -q --show-progress "$source_url$tar_type" -P "$source_base_dir" -T 0
                    mkdir -p "$source_dir"
                    tar "-x${tar_opt}f" "$source_tarball" -C "$source_base_dir"
                    break
                fi
                [[ $tar_type == "${tar_types[-1]}" ]] && error 'wine version specified is unavailable'
            done
        fi
        
        echo ":: Building Wine version '$wine_version'..."
        install_dir="$wine_dir/$wine_version"
        if [[ $arch == x86_64 && ! $opt_b ]]; then
            ERROR_MSG='wine 64-bit build failed'
            build_64_dir="$wine_dir/build_64/$wine_version"
            mkdir -p "$build_64_dir"
            cd "$build_64_dir" || error
            "$source_dir/configure" --prefix="$install_dir" --exec-prefix="$install_dir" --enable-win64
            make || error
        fi
        ERROR_MSG='wine 32-bit build failed'
        build_32_dir="$wine_dir/build_32/$wine_version"
        mkdir -p "$build_32_dir"
        cd "$build_32_dir" || error
        if [[ $arch == x86_64 ]]; then
            if [[ $opt_b ]]; then
                PKG_CONFIG_PATH='/usr/lib32' "$source_dir/configure" \
                    --prefix="$install_dir" --exec-prefix="$install_dir"
            else
                PKG_CONFIG_PATH='/usr/lib32' "$source_dir/configure" \
                    --prefix="$install_dir" --exec-prefix="$install_dir" --with-wine64="$build_64_dir"
            fi
        else
            "$source_dir/configure" --prefix="$install_dir" --exec-prefix="$install_dir"
        fi
        make || error
        
        echo ":: Installing Wine version '$wine_version'"
        ERROR_MSG='wine install failed'
        mkdir -p "$install_dir"
        if [[ $arch == x86_64 && ! $opt_b ]]; then
            cd "$build_64_dir" || error
            make install || error
            cd "$build_32_dir" || error
        fi
        make install || error
        
        unset ERROR_MSG
    done
}

set_wine_dir() {
    wine_dir="$pollywog_dir/wine${wine_patch:+/}$wine_patch"
}

setup_wine_environment() {
    [[ $wine_arch ]] && export WINEARCH="$wine_arch"
    [[ ! $WINEPREFIX && $wine_prefix ]] && export WINEPREFIX="$wineprefix_dir/$wine_prefix"
    if [[ $wine_version ]]; then
        [[ $wine_patch ]] && wine_version="$wine_patch/$wine_version"
        if [[ $wine_prefix ]]; then
            echo ":: Running Wine version '$wine_version' in Wine prefix '$wine_prefix'..."
        else
            echo ":: Running Wine version '$wine_version'..."
        fi
        wine_version_dir="$wine_dir/$wine_version"
        export WINEVERPATH="$wine_version_dir"
        export PATH="$wine_version_dir/bin:$PATH"
        export WINESERVER="$wine_version_dir/bin/wineserver"
        #if [[ $WINEARCH ]]; then
        export WINELOADER="$wine_version_dir/bin/wine"
        export WINEDLLPATH="$wine_version_dir/lib/wine/fakedlls"
        export LD_LIBRARY_PATH="$wine_version_dir/lib:$LD_LIBRARY_PATH"
        #else
        #    export WINELOADER="$wine_version_dir/bin/wine64"
        #    export WINEDLLPATH="$wine_version_dir/lib64/wine/fakedlls"
        #    export LD_LIBRARY_PATH="$wine_version_dir/lib64:$LD_LIBRARY_PATH"
        #fi
    elif [[ $wine_prefix ]]; then
        echo ":: Running in Wine prefix '$wine_prefix'..."
    fi
}

start_shortcut() {
    local shortcut="$1"
    parse_dotfile "$dotfile"
    [[ ${shortcuts[$shortcut]} ]] || error "shortcut '$shortcut' does not exist in wine prefix '$wine_prefix'"
    set_wine_dir
    setup_wine_environment
    if [[ $shortcut == _ ]]; then
        echo ":: Starting default shortcut..."
    else
        echo ":: Starting shortcut '$shortcut'..."
    fi
    wine start "${shortcuts[$shortcut]}"
}

list_shortcuts() {
    [[ $(shopt | grep ^nullglob | cut -f2) == off ]] && { shopt -s nullglob; nullglob_set=0; }
    [[ ! -d $wineprefix_dir ]] && return
    local prefixes=("$wineprefix_dir"/*)
    local dotfile
    for prefix in "${prefixes[@]}"; do
        dotfile="$prefix/.pollywog"
        parse_dotfile "$dotfile"
        
        if [[ ${#shortcuts[@]} -ge 1 ]]; then
            local prefix_name="${prefix##*/}"
            echo -n "$prefix_name─"
            
            local _shortcuts=()
            for shortcut in "${!shortcuts[@]}"; do
                [[ $shortcut != _ ]] && _shortcuts+=("$shortcut")
            done
            
            if [[ ${shortcuts[_]} ]]; then
                if [[ ${#_shortcuts[@]} -ge 1 ]]; then
                    echo -n '┬'
                else
                    echo -n '─'
                fi
                echo "─${shortcuts[_]}"
            else
                echo '┐'
            fi
            for _shortcut in "${_shortcuts[@]}"; do
                #local shortcuts_len="$((${#shortcuts[@]} - 1))"
                for ((i=0; i<=${#prefix_name}; i++)); do echo -n ' '; done
                [[ $_shortcut != "${_shortcuts[$((${#_shortcuts[@]} - 1))]}" ]] && echo -n '├' || echo -n '└'
                echo "─$_shortcut───${shortcuts[$_shortcut]}"
            done
        fi
    done
    [[ $nullglob_set ]] && shopt -u nullglob
}

if [[ $op_R ]]; then
    while getopts ':Rhsctbv:p:' opt; do
        [[ $opt == R ]] && continue
        if [[ $opt == h ]]; then
            echo "$help_msg_op_R"
            exit
        fi
        [[ $opt == v ]] && wine_version="$OPTARG"
        [[ $opt == p ]] && wine_prefix="$OPTARG"
        [[ $opt == s ]] && wine_patch='staging'
        [[ $opt == b ]] && wine_arch='win32'
        setopt "$opt"
    done
    shift $((OPTIND-1))
    
    set_wine_dir
    
    if [[ ! $WINEPREFIX && $wine_prefix ]]; then
        wine_prefix_exists "$wine_prefix" 2>/dev/null || wine_prefix_exists -p "$wine_prefix" || exit 1
#        export WINEPREFIX="$wineprefix_dir/$wine_prefix"
        if [[ $opt_v ]]; then
            wine_version_installed -p "$wine_version" || exit 1
            #generate_version_file "$wine_version" version_file
            echo ":: Setting Wine version to '$wine_version' for Wine prefix '$wine_prefix'..."
            #echo -n "$version_file" > "$wineprefix_dir/$wine_prefix/.pollywog"
            update_dotfile "$wineprefix_dir/$wine_prefix/.pollywog"
        elif [[ $opt_b ]]; then
            update_dotfile "$wineprefix_dir/$wine_prefix/.pollywog"
        fi
        #[[ -r $wineprefix_dir/$wine_prefix/.pollywog ]] && wine_version="$(cat "$wineprefix_dir/$wine_prefix/.pollywog")"
        parse_dotfile "$wineprefix_dir/$wine_prefix/.pollywog"
#        wine_version="$wine_patch/$wine_version"
    elif [[ $opt_v ]]; then
        wine_version_installed -p "$wine_version" || exit 1
#        [[ $opt_s ]] && wine_version="staging/$wine_version"
    fi
    
#    if [[ $wine_version ]]; then
#        if [[ $wine_prefix ]]; then
#            echo ":: Running Wine version '$wine_version' in Wine prefix '$wine_prefix'..."
#        else
#            echo ":: Running Wine version '$wine_version'..."
#        fi
#        wine_version_dir="$pollywog_dir/wine/$wine_version"
#        export WINEVERPATH="$wine_version_dir"
#        export PATH="$wine_version_dir/bin:$PATH"
#        export WINESERVER="$wine_version_dir/bin/wineserver"
#        export WINELOADER="$wine_version_dir/bin/wine"
#        export WINEDLLPATH="$wine_version_dir/lib/wine/fakedlls"
#        export LD_LIBRARY_PATH="$wine_version_dir/lib:$LD_LIBRARY_PATH"
#    elif [[ $wine_prefix ]]; then
#        echo ":: Running in Wine prefix '$wine_prefix'..."
#    fi
    
    setup_wine_environment
    
    if [[ $opt_c ]]; then
        winecfg "$@"
    elif [[ $opt_t ]]; then
        winetricks "$@"
    else
        wine "$@"
    fi
elif [[ $op_W ]]; then
    while getopts ':Whsbr3' opt; do
        [[ $opt == W ]] && continue
        if [[ $opt == h ]]; then
            echo "$help_msg_op_W"
            exit
        fi
        [[ $opt == s ]] && wine_patch='staging'
        setopt "$opt"
    done
    shift $((OPTIND-1))
    
    set_wine_dir
    
    if [[ "$*" ]]; then
        if [[ $opt_r ]]; then
            for version in "$@"; do
                wine_version_installed "$version" || continue
                echo ":: Removing Wine version '$version'..."
                rm -r "${wine_dir:?unset/empty}/$version"
                prefixes=("$wineprefix_dir"/*)
                for prefix in "${prefixes[@]}"; do
                    dotfile="$prefix/.pollywog"
                    #[[ ! -r $version_file ]] && continue
                    #[[ $opt_s ]] && patch='staging/'
                    [[ $opt_s ]] && patch='staging'
                    #[[ $(cat "$version_file") == $patch$version ]] && rm "$version_file"
                    parse_dotfile -A "$dotfile"
                    [[ ${dotfile_variables[wine_patch]}/${dotfile_variables[wine_version]} == $patch/$version ]] && update_dotfile "$dotfile" 'wine_patch' 'wine_version'
                done
            done
        else
            install_wine_versions "$@"
        fi
    else
        list_wine_versions
    fi
elif [[ $op_P ]]; then
    while getopts ':Phncrsubdv:' opt; do
        [[ $opt == P ]] && continue
        if [[ $opt == h ]]; then
            echo "$help_msg_op_P"
            exit
        fi
        [[ $opt == v ]] && wine_version="$OPTARG"
        [[ $opt == s ]] && wine_patch='staging'
        [[ $opt == b ]] && wine_arch='win32'
        setopt "$opt"
    done
    shift $((OPTIND-1))
    
    set_wine_dir
    
    if [[ "$*" ]]; then
        if [[ $opt_r ]]; then
            for prefix in "$@"; do
                wine_prefix_exists "$prefix" || continue
                echo ":: Removing Wine prefix '$prefix'..."
                rm -r "${wineprefix_dir:?unset/empty}/$prefix"
            done
        elif [[ $opt_n ]]; then
            [[ $# -gt 2 ]] && error 'too many arguments'
            [[ $1 == "$2" ]] && error 'arguments cannot be the same'
            wine_prefix_exists "$1" || exit 1
            wine_prefix_exists -n "$2" || exit 1
            echo ":: Renaming Wine prefix '$1' to '$2'..."
            mv "$wineprefix_dir/$1" "$wineprefix_dir/$2"
        elif [[ $opt_c ]]; then
            for prefix in "$@"; do
                wine_prefix_exists -n "$prefix" || continue
                echo ":: Creating Wine prefix '$prefix'..."
                mkdir -p "$wineprefix_dir/$prefix"
            done
        elif [[ $opt_u ]]; then
            for prefix in "$@"; do
                wine_prefix_exists "$prefix" || continue
                dotfile="$wineprefix_dir/$prefix/.pollywog"
                parse_dotfile -A "$dotfile"
                if [[ ${dotfile_variables[wine_version]} ]]; then
                    echo ":: Unsetting Wine version of Wine prefix '$prefix'..."
                    #rm "$version_file"
                    update_dotfile "$dotfile" 'wine_version' 'wine_patch'
                else
                    echo "pollywog: wine prefix '$prefix' has no wine version set"
                fi
            done
        elif [[ $opt_v ]]; then
            #generate_version_file "$wine_version" version_file
            wine_version_installed -p "$wine_version" || exit 1
            for prefix in "$@"; do
                wine_prefix_exists "$prefix" 2>/dev/null || wine_prefix_exists -p "$prefix" || continue
                echo ":: Setting Wine version to '$wine_version' for Wine prefix '$prefix'..."
                #echo -n "$version_file" > "$wineprefix_dir/$prefix/.pollywog"
                update_dotfile "$wineprefix_dir/$prefix/.pollywog"
            done
        elif [[ $opt_d ]]; then
            [[ $# -gt 1 ]] && error 'too many arguments'
            wine_prefix="$1"
            wine_prefix_exists "$wine_prefix" || exit 1
            cd_dir="$wineprefix_dir/$wine_prefix"
            [[ -d $cd_dir/drive_c ]] && cd_dir="$cd_dir/drive_c"
            cd "$cd_dir" || error 'cd failed'
            exec env wine_prefix="$wine_prefix" bash
        elif [[ $opt_b ]]; then
            wine_prefix_exists "$1" || exit 1
            echo ":: Setting Wine arch to '$wine_arch' for Wine prefix '$1'..."
            update_dotfile "$wineprefix_dir/$1/.pollywog"
        else
            for prefix in "$@"; do
                prefix_info="$(list_wine_prefixes | grep -E "(^$prefix |^'$prefix' )")"
                [[ $prefix_info ]] && echo $prefix_info
            done
        fi
    else
        list_wine_prefixes
    fi
elif [[ $op_S ]]; then
    while getopts ':Shnr' opt; do
        [[ $opt == S ]] && continue
        if [[ $opt == h ]]; then
            echo "$help_msg_op_S"
            exit
        fi
        setopt "$opt"
    done
    shift $((OPTIND-1))
    
    if [[ "$*" ]]; then
        wine_prefix="$1"
        shift
        wine_prefix_exists "$wine_prefix" || exit 1
        dotfile="$wineprefix_dir/$wine_prefix/.pollywog"
        parse_dotfile -A "$dotfile"
        if [[ $opt_r ]]; then
            [[ $# -eq 0 ]] && error 'too few arguments'
            for shortcut; do
                [[ ${dotfile_shortcuts[$shortcut]} ]] || error "shortcut '$shortcut' does not exist in wine prefix '$wine_prefix'"
                echo ":: Removing shortcut '$shortcut' from Wine prefix '$wine_prefix'..."
                remove_shortcuts+=("[$shortcut]")
            done
            update_dotfile "$dotfile" "${remove_shortcuts[@]}"
        elif [[ $opt_n ]]; then
            [[ $# -gt 2 ]] && error 'too many arguments'
            [[ $1 == "$2" ]] && error 'arguments cannot be the same'
            shortcut="$1"
            [[ ${dotfile_shortcuts[$shortcut]} ]] || error "shortcut '$shortcut' does not exist in wine prefix '$wine_prefix'"
            new_name="$2"
            [[ ${dotfile_shortcuts[$new_name]} ]] && error "shortcut '$shortcut' already exists in wine prefix '$wine_prefix'"
            declare -A shortcuts["$new_name"]="${dotfile_shortcuts[$shortcut]}"
            echo ":: Renaming shortcut '$shortcut' to '$new_name' in Wine prefix '$wine_prefix'..."
            update_dotfile "$dotfile" "[$shortcut]"
        else
            shortcut="$1"
            if [[ $# -eq 0 ]]; then
                start_shortcut '_'
            elif [[ $# -eq 1 ]]; then
                start_shortcut "$shortcut"
            else
                shift
                [[ ${dotfile_shortcuts[$shortcut]} ]] && error "shortcut '$shortcut' already exists in wine prefix '$wine_prefix'"
                declare -A shortcuts["$shortcut"]="$*"
                echo ":: Creating shortcut '$shortcut' in Wine prefix '$wine_prefix'..."
                update_dotfile "$dotfile"
            fi
        fi
    else
        list_shortcuts
    fi
fi
